1、准备图像数据
2、将数据转换为leveldb数据
SET GLOG_logtostderr=1
convert_imageset.exe \data\Digits\train\ \data\Digits\train.txt \data\Digits\mtrainldb 
pause

3、定义训练网络train_val.prorotxt
name: "LeNet"
layer {
  name: "mnist"
  transform_param {
    scale: 0.00390625

  }
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "C:/Users/Administrator/Desktop/caffe-windows-master/data/Digits/mtrainldb"
    backend: LMDB
    batch_size: 80
  }

  include: { phase: TRAIN }
}
layer {
  name: "mnist"
  transform_param {
    scale: 0.00390625
  }
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "C:/Users/Administrator/Desktop/caffe-windows-master/data/Digits/mvalldb"
    backend: LMDB
    batch_size: 4
  }

  include: { phase: TEST }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    #decay_mult: 1
  }
  param {
    lr_mult: 2
    #decay_mult: 0
  }
  convolution_param {
    num_output: 120
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv1"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    #decay_mult: 1
  }
  param {
    lr_mult: 2
    #decay_mult: 0
  }
  convolution_param {
    num_output: 180
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm3"
  type: "LRN"
  bottom: "pool3"
  top: "norm3"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "norm3"
  top: "conv4"
  param {
    lr_mult: 1
    #decay_mult: 1
  }
  param {
    lr_mult: 2
    #decay_mult: 0
  }
  convolution_param {
    num_output: 210
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv4"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "norm5"
  type: "LRN"
  bottom: "pool5"
  top: "norm5"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "norm5"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu7"
  type: "Insanity"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "drop1"
  type: "Dropout"
  bottom: "ip1"
  top: "ip1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu8"
  type: "Insanity"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "drop2"
  type: "Dropout"
  bottom: "ip2"
  top: "ip2"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}





5、定义训练模型solver.prototxt:

net: "C:/Users/Administrator/Desktop/caffe-windows-master/data/Digits/train_val.prototxt"
test_iter: 100
test_interval: 100
base_lr: 0.001
momentum: 0.9
weight_decay: 0.0005
lr_policy: "inv"
gamma: 0.0001
power: 0.75
display: 100
max_iter: 10000
snapshot: 2000
snapshot_prefix: "C:/Users/Administrator/Desktop/caffe-windows-master/data/Digits/Training_model/MyLenet"
# solver mode: CPU or GPU
solver_mode:  GPU



6、开始训练：Digist 文件夹下创建, caffe.bat,内容如下：
LOG=log/train-`date +%Y-%m-%d-%H-%M-%S`.log
C:\Users\Administrator\Desktop\caffe-windows-master\bin\caffe.exe train --solver C:\Users\Administrator\Desktop\caffe-windows-master\data\Digits\solver.prototxt
pause





